Description: A multi-stage application delivery pipeline. Stages can be deployed to separate accounts. Automated test actions after deployments can be used to stop the pipeline if any tests fail. Apache-2.0 License. Adapt this template to your needs and thoruoughly test it before introducing it in a production environment. **WARNING** This template will create resources in your account that may incur billing charges.

Parameters:

  AppName:
    Type: String
    Description: The unique name for this application. The name will be used as a part of resource names and tags.

  TeamName:
    Type: String
    Description: The name of the team that owns this application.
  
  StageNames:
    Type: CommaDelimitedList
    Description: A list of stage names, for example, "dev,stage,prod"
    Default: prod

  Accounts:
    Type: CommaDelimitedList
    Description: A list of accounts to match the stage names. If left blank, the assumption is that this is a single-account pipeline that is being deployed to the currently configured AWS account. This template does not bootstrap those accounts. Bootstrapping has to be done prior to deploying this template.
    Default: ""

  PipelineSourceKey:
    Type: String
    Description: The name of the S3 object key for the pipeline source
    Default: pipeline-source.zip

  AppSourceKey:
    Type: String
    Description: The name of the S3 object key for the application source
    Default: application-source.zip

  # Note: For each new parameter added here, also add it to the SelfMutate action

Constants:

  PipelineSourceBucket: ${AppName}-pipeline-source-${AWS::Region}-${AWS::AccountId}
  AppSourceBucket: ${AppName}-app-source-${AWS::Region}-${AWS::AccountId}
  ArtifactBucket: ${AppName}-artifacts-${AWS::Region}-${AWS::AccountId}

Resources:

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref AppName
      RoleArn: !GetAtt PipelineRole.Arn
      RestartExecutionOnUpdate: true
      ArtifactStore:
        Type: S3
        Location: !Sub ${Constant::ArtifactBucket}
      Stages:
        - Name: Source
          Actions:
            - Name: PipelineSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Sub ${Constant::PipelineSourceBucket}
                S3ObjectKey: !Ref PipelineSourceKey
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: pipeline-source
            - Name: ApplicationSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Sub ${Constant::ApplicationSourceBucket}
                S3ObjectKey: !Ref ApplicationSourceKey
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: application-source
        - Name: SelfMutate
          Actions:
            - Name: StackUpdate
              InputArtifacts:
                - Name: pipeline-source
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CreateUpdate
                StackName: ${AWS::StackName}
                Capabilities:
                  - CAPABILITY_IAM
                TemplatePath: SourceArtifact::multi-stage.yaml
                ParameterOverrides:
                  AppName: !Ref AppName
                  TeamName: !Ref TeamName
                  StageNames: !Ref StageNames
                  Accounts: !Ref Accounts
                  PipelineSourceKey: !Ref PipelineSourceKey
                  AppSourceKey: !Ref AppSourceKey
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Validate
              InputArtifacts:
                - Name: pipeline-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Validate
                EnvironmentVariables: |-
                  [
                    {
                      "name": "MY_VAR",
                      "type": "PLAINTEXT",
                      "value": "abc"
                    }
                  ]
              RunOrder: 1
            - Name: Build
              InputArtifacts:
                - Name: application-source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Build
                EnvironmentVariables: |-
                  [
                    {
                      "name": "MY_VAR",
                      "type": "PLAINTEXT",
                      "value": "abc"
                    }
                  ]
              RunOrder: 2

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AppName}-pipeline-policy"
      Roles:
        - !Ref PipelineRole
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Constant::ArtifactBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${Constant::ArtifactBucket}/*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Constant::SourceBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${Constant::SourceBucket}/*"
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
              - codebuild:StopBuild
              - codebuild:RetryBuild
              - codebuild:StartBuildBatch
              - codebuild:RetryBuildBatch
              - codebuild:StopBuildBatch
            Effect: Allow
            Resource:
              - !GetAtt Project.Arn

  Validate:
    Type: LocalModule
    Source: ../../modules/build-project.yaml
    Properties:
      Name: !Sub ${AppName}-validate
      ArtifactBucket: !Sub ${Constant::ArtifactBucket}

  Build:
    Type: LocalModule
    Source: ../../modules/build-project.yaml
    Properties:
      Name: !Sub ${AppName}-build
      ArtifactBucket: !Sub ${Constant::ArtifactBucket}

  EventRole:
    Type: AWS::IAM::Role
    Metadata:
      Description: This role allows event bridge to start the pipeline execution when it sees a notification from S3 indicating a source change.
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  EventRolePolicy:
    Type: AWS::IAM::RolePolicy
    Metadata:
      Description: This policy allows event bridge to start the pipeline execution when it sees a notification from S3 indicating a source change.
    Properties:
      PolicyName: eventbridge-pipeline-execution
      RoleName: !Ref EventRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: codepipeline:StartPipelineExecution
            Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}


Outputs:

  AppSourceBucket:
    Value: !Sub ${AppSourceBucket}

