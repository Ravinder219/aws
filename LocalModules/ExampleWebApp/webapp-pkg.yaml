Description: Creates a web application with a static website using S3 and CloudFront,
  an API Gateway REST API, and a DynamoDB table, with Cognito authentication.  Apache-2.0
  License. Adapt this template to your needs and thoruoughly test it before introducing
  it in a production environment. **WARNING** This template will create resources
  in your account that may incur billing charges.
Parameters:
  AppName:
    Type: String
    Description: This name is used as a prefix for resource names
    Default: awscli-cfn-webapp
Outputs:
  SiteURL:
    Value:
      Fn::Sub: https://${SiteDistribution.DomainName}
  RedirectURI:
    Value:
      Fn::Sub: https://${SiteDistribution.DomainName}/index.html
  AppName:
    Value:
      Ref: AppName
  RestApiInvokeURL:
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${RestApiStage}
  AppClientId:
    Value:
      Ref: CognitoClient
  CognitoDomainPrefix:
    Value:
      Ref: AppName
  ContentBucketName:
    Value:
      Ref: SiteContentBucket
Metadata:
  AWSToolsMetrics:
    CloudFormationPackage:
      Modules: 'true'
Resources:
  CognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Ref: AppName
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
      CallbackURLs:
      - Fn::Sub: https://${SiteDistribution.DomainName}/index.html
      AllowedOAuthFlows:
      - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      SupportedIdentityProviders:
      - COGNITO
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/cognito.yaml:Client:35
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: AppName
      UserPoolId:
        Ref: CognitoUserPool
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/cognito.yaml:Domain:29
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: AppName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        Required: true
      - Name: given_name
        Required: true
      - Name: family_name
        Required: true
    DependsOn: SiteDistribution
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/cognito.yaml:UserPool:13
  JwtResourceGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: JwtResourceResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: NONE
      AuthorizerId: AWS::NoValue
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwtResourceHandler.Arn}/invocations
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Get:92
  JwtResourceHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: bootstrap
      FunctionName:
        Fn::Sub: ${AppName}-jwt-handler
      Runtime: provided.al2023
      Code:
        S3Bucket: ezbeard-rain-lambda
        S3Key: e6d1579db392489f6cf9e1887e33d16e
      Role:
        Fn::GetAtt:
        - JwtResourceHandlerRole
        - Arn
      Environment:
        Variables:
          COGNITO_REGION: us-east-1
          COGNITO_POOL_ID:
            Ref: CognitoUserPool
          COGNITO_REDIRECT_URI:
            Fn::Sub: https://${SiteDistribution.DomainName}/index.html
          COGNITO_DOMAIN_PREFIX:
            Ref: AppName
          COGNITO_APP_CLIENT_ID:
            Ref: CognitoClient
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Handler:33
  JwtResourceHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:HandlerRole:42
  JwtResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: JwtResourceResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwtResourceHandler.Arn}/invocations
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Options:80
  JwtResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - JwtResourceHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Permission:64
  JwtResourceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::Sub: ${RestApi.RootResourceId}
      PathPart: jwt
      RestApiId:
        Ref: RestApi
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Resource:57
  JwtResourceRootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - JwtResourceHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:RootPermission:72
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AppName
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/rest-api.yaml:Api:11
  RestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.authorization
      Name: CognitoApiAuthorizer
      ProviderARNs:
      - Fn::GetAtt:
        - CognitoUserPool
        - Arn
      RestApiId:
        Ref: RestApi
      Type: COGNITO_USER_POOLS
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/rest-api.yaml:ApiAuthorizer:28
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: RestApi
    DependsOn:
    - TestResourceGet
    - JwtResourceOptions
    - TestResourceOptions
    - JwtResourceGet
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/rest-api.yaml:ApiDeployment:16
  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: RestApi
      DeploymentId:
        Ref: RestApiDeployment
      StageName: prod
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/rest-api.yaml:ApiStage:21
  SiteCloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:Bucket:98
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName:
          Ref: SiteCloudFrontLogsLogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role:
          Fn::GetAtt:
          - SiteCloudFrontLogsReplicationRole
          - Arn
        Rules:
        - Destination:
            Bucket:
              Fn::GetAtt:
              - SiteCloudFrontLogsReplicaBucket
              - Arn
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
  SiteCloudFrontLogsBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteCloudFrontLogsLogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
        - comment: This is the log bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:LogBucket:65
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  SiteCloudFrontLogsLogBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteCloudFrontLogsReplicaBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
        - comment: This is the replica bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
        - S3_BUCKET_LOGGING_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicaBucket:127
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  SiteCloudFrontLogsReplicaBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteCloudFrontLogsReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetReplicationConfiguration
          - s3:ListBucket
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}
        - Action:
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionTagging
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-${AWS::Region}-${AWS::AccountId}/*
        - Action:
          - s3:ReplicateObject
          - s3:ReplicateDelete
          - s3:ReplicationTags
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-cflogs-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
      PolicyName: bucket-replication-policy
      RoleName:
        Ref: SiteCloudFrontLogsReplicationRole
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicationPolicy:155
  SiteCloudFrontLogsReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - s3.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicationRole:181
  SiteContentBucket:
    Type: AWS::S3::Bucket
    Metadata:
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:Bucket:98
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-content-${AWS::Region}-${AWS::AccountId}
      LoggingConfiguration:
        DestinationBucketName:
          Ref: SiteContentLogBucket
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role:
          Fn::GetAtt:
          - SiteContentReplicationRole
          - Arn
        Rules:
        - Destination:
            Bucket:
              Fn::GetAtt:
              - SiteContentReplicaBucket
              - Arn
          Status: Enabled
      VersioningConfiguration:
        Status: Enabled
  SiteContentBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-content-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${SiteDistribution.Id}
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteContentLogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket records access logs for the main bucket
      checkov:
        skip:
        - comment: This is the log bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_LOGGING_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:LogBucket:65
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}
      ObjectLockConfiguration:
        ObjectLockEnabled: Enabled
        Rule:
          DefaultRetention:
            Mode: COMPLIANCE
            Years: 1
      ObjectLockEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  SiteContentLogBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}/*
        - Action: s3:PutObject
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}/*
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service: logging.s3.amazonaws.com
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-logs-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteContentReplicaBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: This bucket is used as a target for replicas from the main bucket
      checkov:
        skip:
        - comment: This is the replica bucket
          id: CKV_AWS_18
      guard:
        SuppressedRules:
        - S3_BUCKET_DEFAULT_LOCK_ENABLED
        - S3_BUCKET_REPLICATION_ENABLED
        - S3_BUCKET_LOGGING_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicaBucket:127
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      BucketName:
        Fn::Sub: ${AppName}-content-replicas-${AWS::Region}-${AWS::AccountId}
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
  SiteContentReplicaBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::Sub: ${AppName}-content-replicas-${AWS::Region}-${AWS::AccountId}
      PolicyDocument:
        Statement:
        - Action: s3:*
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Deny
          Principal:
            AWS: '*'
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-replicas-${AWS::Region}-${AWS::AccountId}
          - Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/bucket-policy.yaml:Policy:5
  SiteContentReplicationPolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetReplicationConfiguration
          - s3:ListBucket
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}
        - Action:
          - s3:GetObjectVersionForReplication
          - s3:GetObjectVersionAcl
          - s3:GetObjectVersionTagging
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-${AWS::Region}-${AWS::AccountId}/*
        - Action:
          - s3:ReplicateObject
          - s3:ReplicateDelete
          - s3:ReplicationTags
          Effect: Allow
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${AppName}-content-replicas-${AWS::Region}-${AWS::AccountId}/*
        Version: '2012-10-17'
      PolicyName: bucket-replication-policy
      RoleName:
        Ref: SiteContentReplicationRole
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicationPolicy:155
  SiteContentReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - s3.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/compliant-bucket.yaml:ReplicationRole:181
  SiteDistribution:
    Type: AWS::CloudFront::Distribution
    Metadata:
      checkov:
        skip:
        - id: CKV_AWS_174
          comment: Using the default cloudfront certificate with no aliases
      guard:
        SuppressedRules:
        - CLOUDFRONT_CUSTOM_SSL_CERTIFICATE
        - CLOUDFRONT_ORIGIN_FAILOVER_ENABLED
        - CLOUDFRONT_SNI_ENABLED
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/static-site.yaml:Distribution:26
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId:
            Fn::Sub: ${AppName}-origin-1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
            - SiteCloudFrontLogsBucket
            - RegionalDomainName
        Origins:
        - DomainName:
            Fn::GetAtt:
            - SiteContentBucket
            - RegionalDomainName
          Id:
            Fn::Sub: ${AppName}-origin-1
          OriginAccessControlId:
            Fn::GetAtt:
            - SiteOriginAccessControl
            - Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        WebACLId:
          Fn::GetAtt:
          - SiteWebACL
          - Arn
  SiteOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Join:
          - ''
          - - Ref: AppName
            - Fn::Select:
              - 2
              - Fn::Split:
                - /
                - Ref: AWS::StackId
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/static-site.yaml:OriginAccessControl:10
  SiteWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: WebACLWithAMR
      Scope: CLOUDFRONT
      Description: Web ACL with AWS Managed Rules
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: MetricForWebACLWithAMR
      Tags:
      - Key: Name
        Value:
          Ref: AppName
      Rules:
      - Name: AWS-AWSManagedRulesCommonRuleSet
        Priority: 0
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: MetricForAMRCRS
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
            ExcludedRules:
            - Name: NoUserAgent_HEADER
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/static-site.yaml:WebACL:61
  TestDataLambdaPolicy:
    Type: AWS::IAM::RolePolicy
    Metadata:
      Comment: This resource is created only if the LambdaRoleArn is set
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/simple-table.yaml:LambdaPolicy:31
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - dynamodb:BatchGetItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - TestDataTable
            - Arn
      PolicyName:
        Fn::Sub: ${AppName}-test-policy
      RoleName:
        Ref: TestResourceHandlerRole
  TestDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName:
        Fn::Sub: ${AppName}-test
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/simple-table.yaml:Table:19
  TestResourceGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: TestResourceResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: RestApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestResourceHandler.Arn}/invocations
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Get:92
  TestResourceHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: bootstrap
      FunctionName:
        Fn::Sub: ${AppName}-test-handler
      Runtime: provided.al2023
      Code:
        S3Bucket: ezbeard-rain-lambda
        S3Key: 7dc753763da763a8f66f4375fd434792
      Role:
        Fn::GetAtt:
        - TestResourceHandlerRole
        - Arn
      Environment:
        Variables:
          TABLE_NAME:
            Ref: TestDataTable
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Handler:33
  TestResourceHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:HandlerRole:42
  TestResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: TestResourceResource
      RestApiId:
        Ref: RestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestResourceHandler.Arn}/invocations
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Options:80
  TestResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - TestResourceHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Permission:64
  TestResourceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::Sub: ${RestApi.RootResourceId}
      PathPart: test
      RestApiId:
        Ref: RestApi
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:Resource:57
  TestResourceRootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - TestResourceHandler
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/
    Metadata:
      SourceMap: /Users/ezbeard/Source/aws-cloudformation-templates/LocalModules/ExampleWebApp/modules/api-resource.yaml:RootPermission:72
